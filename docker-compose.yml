version: '3.9'

services:

  scrapyd:
    build: 
      # context: deployment
      dockerfile: Dockerfile.scrapyd
    ports:
      - 6800:6800
    volumes:
      - scrapyd-volume:/scrapyd:Z
    networks:
      - de_network
    depends_on:
      - minio

  # scrapydweb:
  #   image: ryanvin/scrapydweb
  #   ports:
  #     - 5000:5000
  #   depends_on:
  #     - scrapyd
  
  crawlersetup:
    build: 
      # context: deployment
      dockerfile: Dockerfile.crawlersetup
    depends_on:
      - scrapyd
    networks:
      - de_network

  minio:
    image: quay.io/minio/minio
    ports:
      - '9000:9000'
      - '9090:9090'
    networks:
      - de_network
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    volumes:
      - '~/minio/data:/data'
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=adminadmin
    command: server --console-address ":9090" /data
      # - MINIO_DEFAULT_BUCKETS=your_bucket_name
  
  prefect:
    build: 
      dockerfile: Dockerfile.prefect
    environment:
      - PREFECT_API_TOKEN
      - PREFECT_API_URL
      - PREFECT_WORKSPACE
      - DELTA_MAIN_TABLE_NAME
      - AWS_ENDPOINT_URL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - MODEL_STORE_AWS_BUCKET
    depends_on:
      - minio
    networks:
      - de_network

  mlapi:
    build: 
      dockerfile: Dockerfile.mlapi
    environment:
      - DELTA_MAIN_TABLE_NAME
      - AWS_ENDPOINT_URL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - MODEL_STORE_AWS_BUCKET
    depends_on:
      - minio
    ports:
    - 8200:8200
    networks:
      - de_network
  
# # Datahub services go here
#   broker:
#     container_name: broker
#     depends_on:
#       zookeeper:
#         condition: service_healthy
#       minio:
#         condition: service_started
#     environment:
#     - KAFKA_BROKER_ID=1
#     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
#     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
#     - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
#     - KAFKA_HEAP_OPTS=-Xms256m -Xmx256m
#     - KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE=false
#     - KAFKA_MESSAGE_MAX_BYTES=5242880
#     - KAFKA_MAX_MESSAGE_BYTES=5242880
#     healthcheck:
#       interval: 1s
#       retries: 5
#       start_period: 60s
#       test: nc -z broker $${DATAHUB_KAFKA_BROKER_PORT:-9092}
#       timeout: 5s
#     hostname: broker
#     image: confluentinc/cp-kafka:7.4.0
#     ports:
#     - ${DATAHUB_MAPPED_KAFKA_BROKER_PORT:-9092}:9092
#     volumes:
#     - broker:/var/lib/kafka/data/
#     networks:
#       - de_network
  
#   datahub-actions:
#     container_name: datahub-actions
#     depends_on:
#       minio:
#         condition: service_started
#       datahub-gms:
#         condition: service_healthy
#     environment:
#     - ACTIONS_CONFIG=${ACTIONS_CONFIG:-}
#     - ACTIONS_EXTRA_PACKAGES=${ACTIONS_EXTRA_PACKAGES:-}
#     - DATAHUB_GMS_HOST=datahub-gms
#     - DATAHUB_GMS_PORT=8080
#     - DATAHUB_GMS_PROTOCOL=http
#     - DATAHUB_SYSTEM_CLIENT_ID=__datahub_system
#     - DATAHUB_SYSTEM_CLIENT_SECRET=JohnSnowKnowsNothing
#     - KAFKA_BOOTSTRAP_SERVER=broker:29092
#     - KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
#     - METADATA_AUDIT_EVENT_NAME=MetadataAuditEvent_v4
#     - METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME=MetadataChangeLog_Versioned_v1
#     - SCHEMA_REGISTRY_URL=http://schema-registry:8081
#     hostname: actions
#     image: ${DATAHUB_ACTIONS_IMAGE:-acryldata/datahub-actions}:${ACTIONS_VERSION:-head}
#     networks:
#       - de_network

#   datahub-frontend-react:
#     container_name: datahub-frontend-react
#     depends_on:
#       minio:
#         condition: service_started
#       datahub-gms:
#         condition: service_healthy
#     environment:
#     - DATAHUB_GMS_HOST=datahub-gms
#     - DATAHUB_GMS_PORT=8080
#     - DATAHUB_SECRET=YouKnowNothing
#     - DATAHUB_APP_VERSION=1.0
#     - DATAHUB_PLAY_MEM_BUFFER_SIZE=10MB
#     - JAVA_OPTS=-Xms512m -Xmx512m -Dhttp.port=9002 -Dconfig.file=datahub-frontend/conf/application.conf -Djava.security.auth.login.config=datahub-frontend/conf/jaas.conf -Dlogback.configurationFile=datahub-frontend/conf/logback.xml -Dlogback.debug=false -Dpidfile.path=/dev/null
#     - KAFKA_BOOTSTRAP_SERVER=broker:29092
#     - DATAHUB_TRACKING_TOPIC=DataHubUsageEvent_v1
#     - ELASTIC_CLIENT_HOST=elasticsearch
#     - ELASTIC_CLIENT_PORT=9200
#     hostname: datahub-frontend-react
#     image: ${DATAHUB_FRONTEND_IMAGE:-linkedin/datahub-frontend-react}:${DATAHUB_VERSION:-head}
#     ports:
#     - ${DATAHUB_MAPPED_FRONTEND_PORT:-9002}:9002
#     volumes:
#     - ${HOME}/.datahub/plugins:/etc/datahub/plugins
#     networks:
#       - de_network
  
#   datahub-gms:
#     container_name: datahub-gms
#     depends_on:
#       minio:
#         condition: service_started
#       datahub-upgrade:
#         condition: service_completed_successfully
#     environment:
#     - DATAHUB_SERVER_TYPE=${DATAHUB_SERVER_TYPE:-quickstart}
#     - DATAHUB_TELEMETRY_ENABLED=${DATAHUB_TELEMETRY_ENABLED:-true}
#     - DATAHUB_UPGRADE_HISTORY_KAFKA_CONSUMER_GROUP_ID=generic-duhe-consumer-job-client-gms
#     - EBEAN_DATASOURCE_DRIVER=com.mysql.jdbc.Driver
#     - EBEAN_DATASOURCE_HOST=mysql:3306
#     - EBEAN_DATASOURCE_PASSWORD=datahub
#     - EBEAN_DATASOURCE_URL=jdbc:mysql://mysql:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8
#     - EBEAN_DATASOURCE_USERNAME=datahub
#     - ELASTICSEARCH_HOST=elasticsearch
#     - ELASTICSEARCH_INDEX_BUILDER_MAPPINGS_REINDEX=true
#     - ELASTICSEARCH_INDEX_BUILDER_SETTINGS_REINDEX=true
#     - ELASTICSEARCH_PORT=9200
#     - ENTITY_REGISTRY_CONFIG_PATH=/datahub/datahub-gms/resources/entity-registry.yml
#     - ENTITY_SERVICE_ENABLE_RETENTION=true
#     - ES_BULK_REFRESH_POLICY=WAIT_UNTIL
#     - GRAPH_SERVICE_DIFF_MODE_ENABLED=true
#     - GRAPH_SERVICE_IMPL=elasticsearch
#     - JAVA_OPTS=-Xms1g -Xmx1g
#     - KAFKA_BOOTSTRAP_SERVER=broker:29092
#     - KAFKA_CONSUMER_STOP_ON_DESERIALIZATION_ERROR=${KAFKA_CONSUMER_STOP_ON_DESERIALIZATION_ERROR:-true}
#     - KAFKA_SCHEMAREGISTRY_URL=http://schema-registry:8081
#     - MAE_CONSUMER_ENABLED=true
#     - MCE_CONSUMER_ENABLED=true
#     - PE_CONSUMER_ENABLED=true
#     - UI_INGESTION_ENABLED=true
#     healthcheck:
#       interval: 1s
#       retries: 3
#       start_period: 90s
#       test: curl -sS --fail http://datahub-gms:${DATAHUB_GMS_PORT:-8080}/health
#       timeout: 5s
#     hostname: datahub-gms
#     image: ${DATAHUB_GMS_IMAGE:-linkedin/datahub-gms}:${DATAHUB_VERSION:-head}
#     ports:
#     - ${DATAHUB_MAPPED_GMS_PORT:-8080}:8080
#     volumes:
#     - ${HOME}/.datahub/plugins:/etc/datahub/plugins
#     networks:
#       - de_network
  
#   datahub-upgrade:
#     command:
#     - -u
#     - SystemUpdate
#     container_name: datahub-upgrade
#     depends_on:
#       minio:
#         condition: service_started
#       elasticsearch-setup:
#         condition: service_completed_successfully
#       kafka-setup:
#         condition: service_completed_successfully
#       mysql-setup:
#         condition: service_completed_successfully
#     environment:
#     - EBEAN_DATASOURCE_USERNAME=datahub
#     - EBEAN_DATASOURCE_PASSWORD=datahub
#     - EBEAN_DATASOURCE_HOST=mysql:3306
#     - EBEAN_DATASOURCE_URL=jdbc:mysql://mysql:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8
#     - EBEAN_DATASOURCE_DRIVER=com.mysql.jdbc.Driver
#     - KAFKA_BOOTSTRAP_SERVER=broker:29092
#     - KAFKA_SCHEMAREGISTRY_URL=http://schema-registry:8081
#     - ELASTICSEARCH_HOST=elasticsearch
#     - ELASTICSEARCH_PORT=9200
#     - ELASTICSEARCH_INDEX_BUILDER_MAPPINGS_REINDEX=true
#     - ELASTICSEARCH_INDEX_BUILDER_SETTINGS_REINDEX=true
#     - ELASTICSEARCH_BUILD_INDICES_CLONE_INDICES=false
#     - GRAPH_SERVICE_IMPL=elasticsearch
#     - DATAHUB_GMS_HOST=datahub-gms
#     - DATAHUB_GMS_PORT=8080
#     - ENTITY_REGISTRY_CONFIG_PATH=/datahub/datahub-gms/resources/entity-registry.yml
#     - BACKFILL_BROWSE_PATHS_V2=true
#     - REPROCESS_DEFAULT_BROWSE_PATHS_V2=false
#     hostname: datahub-upgrade
#     image: ${DATAHUB_UPGRADE_IMAGE:-acryldata/datahub-upgrade}:${DATAHUB_VERSION:-head}
#     labels:
#       datahub_setup_job: true
#     networks:
#       - de_network
  
#   elasticsearch:
#     container_name: elasticsearch
#     deploy:
#       resources:
#         limits:
#           memory: 1G
#     depends_on:
#       - minio
#     environment:
#     - discovery.type=single-node
#     - ${XPACK_SECURITY_ENABLED:-xpack.security.enabled=false}
#     - ES_JAVA_OPTS=-Xms256m -Xmx512m -Dlog4j2.formatMsgNoLookups=true
#     - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m -Dlog4j2.formatMsgNoLookups=true
#     healthcheck:
#       interval: 1s
#       retries: 3
#       start_period: 20s
#       test: curl -sS --fail http://elasticsearch:$${DATAHUB_ELASTIC_PORT:-9200}/_cluster/health?wait_for_status=yellow&timeout=0s
#       timeout: 5s
#     hostname: elasticsearch
#     image: ${DATAHUB_SEARCH_IMAGE:-elasticsearch}:${DATAHUB_SEARCH_TAG:-7.10.1}
#     ports:
#     - ${DATAHUB_MAPPED_ELASTIC_PORT:-9200}:9200
#     volumes:
#     - esdata:/usr/share/elasticsearch/data
#     networks:
#       - de_network
  
#   elasticsearch-setup:
#     container_name: elasticsearch-setup
#     depends_on:
#       minio:
#         condition: service_started
#       elasticsearch:
#         condition: service_healthy
#     environment:
#     - ELASTICSEARCH_USE_SSL=${ELASTICSEARCH_USE_SSL:-false}
#     - USE_AWS_ELASTICSEARCH=${USE_AWS_ELASTICSEARCH:-false}
#     - ELASTICSEARCH_HOST=elasticsearch
#     - ELASTICSEARCH_PORT=9200
#     - ELASTICSEARCH_PROTOCOL=http
#     hostname: elasticsearch-setup
#     image: ${DATAHUB_ELASTIC_SETUP_IMAGE:-linkedin/datahub-elasticsearch-setup}:${DATAHUB_VERSION:-head}
#     labels:
#       datahub_setup_job: true
#     networks:
#       - de_network
    
#   kafka-setup:
#     container_name: kafka-setup
#     depends_on:
#       minio:
#         condition: service_started
#       broker:
#         condition: service_healthy
#       schema-registry:
#         condition: service_healthy
#     environment:
#     - DATAHUB_PRECREATE_TOPICS=${DATAHUB_PRECREATE_TOPICS:-false}
#     - KAFKA_BOOTSTRAP_SERVER=broker:29092
#     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#     - USE_CONFLUENT_SCHEMA_REGISTRY=TRUE
#     hostname: kafka-setup
#     image: ${DATAHUB_KAFKA_SETUP_IMAGE:-linkedin/datahub-kafka-setup}:${DATAHUB_VERSION:-head}
#     labels:
#       datahub_setup_job: true
#     networks:
#       - de_network
  
#   mysql:
#     command: --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --default-authentication-plugin=mysql_native_password
#     container_name: mysql
#     environment:
#     - MYSQL_DATABASE=datahub
#     - MYSQL_USER=datahub
#     - MYSQL_PASSWORD=datahub
#     - MYSQL_ROOT_PASSWORD=datahub
#     depends_on:
#       - minio
#     healthcheck:
#       interval: 1s
#       retries: 5
#       start_period: 20s
#       test: mysqladmin ping -h mysql -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
#       timeout: 5s
#     hostname: mysql
#     image: mariadb:10.5.8
#     ports:
#     - ${DATAHUB_MAPPED_MYSQL_PORT:-3306}:3306
#     restart: on-failure
#     volumes:
#     - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
#     - mysqldata:/var/lib/mysql
#     networks:
#       - de_network
  
#   mysql-setup:
#     container_name: mysql-setup
#     depends_on:
#       minio:
#         condition: service_started
#       mysql:
#         condition: service_healthy
#     environment:
#     - MYSQL_HOST=mysql
#     - MYSQL_PORT=3306
#     - MYSQL_USERNAME=datahub
#     - MYSQL_PASSWORD=datahub
#     - DATAHUB_DB_NAME=datahub
#     hostname: mysql-setup
#     image: ${DATAHUB_MYSQL_SETUP_IMAGE:-acryldata/datahub-mysql-setup}:${DATAHUB_VERSION:-head}
#     labels:
#       datahub_setup_job: true
#     networks:
#       - de_network
    
#   schema-registry:
#     container_name: schema-registry
#     depends_on:
#       minio:
#         condition: service_started
#       broker:
#         condition: service_healthy
#     environment:
#     - SCHEMA_REGISTRY_HOST_NAME=schemaregistry
#     - SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL=PLAINTEXT
#     - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=broker:29092
#     healthcheck:
#       interval: 1s
#       retries: 3
#       start_period: 60s
#       test: nc -z schema-registry ${DATAHUB_SCHEMA_REGISTRY_PORT:-8081}
#       timeout: 5s
#     hostname: schema-registry
#     image: confluentinc/cp-schema-registry:7.4.0
#     ports:
#     - ${DATAHUB_MAPPED_SCHEMA_REGISTRY_PORT:-8081}:8081
#     networks:
#       - de_network
  
#   zookeeper:
#     container_name: zookeeper
#     environment:
#     - ZOOKEEPER_CLIENT_PORT=2181
#     - ZOOKEEPER_TICK_TIME=2000
#     depends_on:
#       - minio
#     healthcheck:
#       interval: 5s
#       retries: 3
#       start_period: 30s
#       test: echo srvr | nc zookeeper $${DATAHUB_ZK_PORT:-2181}
#       timeout: 5s
#     hostname: zookeeper
#     image: confluentinc/cp-zookeeper:7.4.0
#     ports:
#     - ${DATAHUB_MAPPED_ZK_PORT:-2181}:2181
#     volumes:
#     - zkdata:/var/lib/zookeeper/data
#     - zklogs:/var/lib/zookeeper/log
#     networks:
#       - de_network

networks:
  de_network:
    # name: de_network
    driver: bridge
  # default:
  #   name: de_network
    # driver: bridge

volumes:
  scrapyd-volume:
  broker: null
  esdata: null
  mysqldata: null
  zkdata: null
  zklogs: null
